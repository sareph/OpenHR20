   1               		.file	"eeprom.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.EEPROM_read,"ax",@progbits
  11               	.global	EEPROM_read
  13               	EEPROM_read:
  14               	.LFB1:
  15               		.file 1 "../common/eeprom.c"
   1:../common/eeprom.c **** /*
   2:../common/eeprom.c ****  *  Open HR20
   3:../common/eeprom.c ****  *
   4:../common/eeprom.c ****  *  target:     ATmega169 @ 4 MHz in Honnywell Rondostat HR20E
   5:../common/eeprom.c ****  *
   6:../common/eeprom.c ****  *  compiler:   WinAVR-20071221
   7:../common/eeprom.c ****  *              avr-libc 1.6.0
   8:../common/eeprom.c ****  *              GCC 4.2.2
   9:../common/eeprom.c ****  *
  10:../common/eeprom.c ****  *  copyright:  2008 Jiri Dobry (jdobry-at-centrum-dot-cz)
  11:../common/eeprom.c ****  *
  12:../common/eeprom.c ****  *  license:    This program is free software; you can redistribute it and/or
  13:../common/eeprom.c ****  *              modify it under the terms of the GNU Library General Public
  14:../common/eeprom.c ****  *              License as published by the Free Software Foundation; either
  15:../common/eeprom.c ****  *              version 2 of the License, or (at your option) any later version.
  16:../common/eeprom.c ****  *
  17:../common/eeprom.c ****  *              This program is distributed in the hope that it will be useful,
  18:../common/eeprom.c ****  *              but WITHOUT ANY WARRANTY; without even the implied warranty of
  19:../common/eeprom.c ****  *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  20:../common/eeprom.c ****  *              GNU General Public License for more details.
  21:../common/eeprom.c ****  *
  22:../common/eeprom.c ****  *              You should have received a copy of the GNU General Public License
  23:../common/eeprom.c ****  *              along with this program. If not, see http:*www.gnu.org/licenses
  24:../common/eeprom.c ****  */
  25:../common/eeprom.c **** 
  26:../common/eeprom.c **** /*!
  27:../common/eeprom.c ****  * \file       eeprom.c
  28:../common/eeprom.c ****  * \brief      EEPROM storage
  29:../common/eeprom.c ****  * \author     Jiri Dobry <jdobry-at-centrum-dot-cz>
  30:../common/eeprom.c ****  * \date       $Date: 2011-03-06 00:44:56 +0100 (N, 06 mar 2011) $
  31:../common/eeprom.c ****  * $Rev: 319 $
  32:../common/eeprom.c ****  */
  33:../common/eeprom.c **** 
  34:../common/eeprom.c **** #include "config.h"
  35:../common/eeprom.c **** #if !defined(MASTER_CONFIG_H)
  36:../common/eeprom.c **** #include "controller.h"
  37:../common/eeprom.c **** #endif
  38:../common/eeprom.c **** #include <avr/eeprom.h>
  39:../common/eeprom.c **** 
  40:../common/eeprom.c **** #define __EEPROM_C__
  41:../common/eeprom.c **** #include "eeprom.h"
  42:../common/eeprom.c **** 
  43:../common/eeprom.c **** 
  44:../common/eeprom.c **** 
  45:../common/eeprom.c **** // test for compilation
  46:../common/eeprom.c **** #if RTC_TIMERS_PER_DOW != 8
  47:../common/eeprom.c **** #error EEPROM layout is prepared for RTC_TIMERS_PER_DOW
  48:../common/eeprom.c **** #endif 
  49:../common/eeprom.c **** 
  50:../common/eeprom.c **** 
  51:../common/eeprom.c **** /*!
  52:../common/eeprom.c ****  *******************************************************************************
  53:../common/eeprom.c ****  *  \note standard asm/eeprom.h is not used.
  54:../common/eeprom.c ****  *  Reason: eeprom_write_byte use only uint8_t address
  55:../common/eeprom.c ****  ******************************************************************************/
  56:../common/eeprom.c **** 
  57:../common/eeprom.c **** config_t config;
  58:../common/eeprom.c **** 
  59:../common/eeprom.c **** /*!
  60:../common/eeprom.c ****  *******************************************************************************
  61:../common/eeprom.c ****  *  generic EEPROM read
  62:../common/eeprom.c ****  *
  63:../common/eeprom.c ****  ******************************************************************************/
  64:../common/eeprom.c **** 
  65:../common/eeprom.c **** uint8_t EEPROM_read(uint16_t address)
  66:../common/eeprom.c **** {
  16               		.loc 1 66 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  67:../common/eeprom.c **** 	return eeprom_read_byte(address);
  23               		.loc 1 67 0
  24 0000 0E94 0000 		call __eerd_byte_m169p
  25               	.LVL1:
  68:../common/eeprom.c **** 
  69:../common/eeprom.c **** 	/* Wait for completion of previous write */
  70:../common/eeprom.c **** 	//while(EECR & (1<<EEWE))
  71:../common/eeprom.c **** 	//	;
  72:../common/eeprom.c **** 	//EEAR = address;
  73:../common/eeprom.c **** 	//EECR |= (1<<EERE);
  74:../common/eeprom.c **** 	//return EEDR;
  75:../common/eeprom.c **** }
  26               		.loc 1 75 0
  27 0004 0895      		ret
  28               		.cfi_endproc
  29               	.LFE1:
  31               		.section	.text.config_read,"ax",@progbits
  32               	.global	config_read
  34               	config_read:
  35               	.LFB2:
  76:../common/eeprom.c **** 
  77:../common/eeprom.c **** /*!
  78:../common/eeprom.c ****  *******************************************************************************
  79:../common/eeprom.c ****  *  config_read
  80:../common/eeprom.c ****  *	it is similar as EEPROM_read, but optimized for special usage
  81:../common/eeprom.c ****  ******************************************************************************/
  82:../common/eeprom.c **** uint8_t config_read(uint8_t cfg_address, uint8_t cfg_type)
  83:../common/eeprom.c **** {
  36               		.loc 1 83 0
  37               		.cfi_startproc
  38               	.LVL2:
  39               	/* prologue: function */
  40               	/* frame size = 0 */
  41               	/* stack size = 0 */
  42               	.L__stack_usage = 0
  84:../common/eeprom.c **** 	/* Wait for completion of previous write */
  85:../common/eeprom.c **** 	//while(EECR & (1<<EEWE))
  86:../common/eeprom.c **** 	//	;
  87:../common/eeprom.c **** 	//EEAR = (((uint16_t) cfg_address) << 2) + cfg_type + (uint16_t)(&ee_config);
  88:../common/eeprom.c **** 	//EECR |= (1<<EERE);
  89:../common/eeprom.c **** 	//return EEDR;
  90:../common/eeprom.c **** 
  91:../common/eeprom.c **** 	uint16_t address = (((uint16_t)cfg_address) << 2) + cfg_type + (uint16_t)(&ee_config);
  43               		.loc 1 91 0
  44 0000 70E0      		ldi r23,0
  45 0002 6050      		subi r22,lo8(-(ee_config))
  46 0004 7040      		sbci r23,hi8(-(ee_config))
  47               	.LVL3:
  92:../common/eeprom.c **** 	return eeprom_read_byte(address);
  48               		.loc 1 92 0
  49 0006 9B01      		movw r18,r22
  50 0008 44E0      		ldi r20,lo8(4)
  51 000a 849F      		mul r24,r20
  52 000c 200D      		add r18,r0
  53 000e 311D      		adc r19,r1
  54 0010 1124      		clr __zero_reg__
  55 0012 C901      		movw r24,r18
  56               	.LVL4:
  57 0014 0E94 0000 		call __eerd_byte_m169p
  58               	.LVL5:
  93:../common/eeprom.c **** }
  59               		.loc 1 93 0
  60 0018 0895      		ret
  61               		.cfi_endproc
  62               	.LFE2:
  64               		.section	.text.eeprom_config_save,"ax",@progbits
  65               	.global	eeprom_config_save
  67               	eeprom_config_save:
  68               	.LFB5:
  94:../common/eeprom.c **** 
  95:../common/eeprom.c **** /*!
  96:../common/eeprom.c ****  *******************************************************************************
  97:../common/eeprom.c ****  *  EEPROM_write
  98:../common/eeprom.c ****  *
  99:../common/eeprom.c ****  *  \note private function
 100:../common/eeprom.c ****  *  \note write to ee_config is limited
 101:../common/eeprom.c ****  ******************************************************************************/
 102:../common/eeprom.c **** #define config_write(cfg_address,data) (EEPROM_write((((uint16_t) cfg_address) << 2) + CONFIG_VALUE
 103:../common/eeprom.c **** 
 104:../common/eeprom.c **** static int16_t EEPROM_write(uint16_t address, uint8_t data)
 105:../common/eeprom.c **** {
 106:../common/eeprom.c **** 	/* Wait for completion of previous write */
 107:../common/eeprom.c **** 	if ((address >= (uint16_t)&ee_config) && (address & 3))
 108:../common/eeprom.c **** 	{
 109:../common/eeprom.c **** 		// write to eeconfig area is allowed only to column 0 / alligned to 4
 110:../common/eeprom.c **** 		return 6; // write protection for configuration default/min/max data
 111:../common/eeprom.c **** 	}
 112:../common/eeprom.c **** 
 113:../common/eeprom.c **** 	eeprom_write_byte(address, data);
 114:../common/eeprom.c **** 
 115:../common/eeprom.c **** 	/*
 116:../common/eeprom.c **** 	 while(EECR & (1<<EEWE))
 117:../common/eeprom.c **** 	 ;
 118:../common/eeprom.c **** 	 EEAR = address;
 119:../common/eeprom.c **** 	 EEDR = data;
 120:../common/eeprom.c **** 	 asm ("cli");
 121:../common/eeprom.c **** 	 EECR |= (1<<EEMWE);
 122:../common/eeprom.c **** 	 EECR |= (1<<EEWE);
 123:../common/eeprom.c **** 	 asm ("sei");
 124:../common/eeprom.c **** 	 */
 125:../common/eeprom.c **** 	return 0;
 126:../common/eeprom.c **** }
 127:../common/eeprom.c **** 
 128:../common/eeprom.c **** 
 129:../common/eeprom.c **** 
 130:../common/eeprom.c **** /*!
 131:../common/eeprom.c ****  *******************************************************************************
 132:../common/eeprom.c ****  *  Init configuration storage
 133:../common/eeprom.c ****  *
 134:../common/eeprom.c ****  *  \note
 135:../common/eeprom.c ****  ******************************************************************************/
 136:../common/eeprom.c **** 
 137:../common/eeprom.c **** void eeprom_config_init(bool restore_default)
 138:../common/eeprom.c **** {
 139:../common/eeprom.c **** 
 140:../common/eeprom.c **** 	uint16_t i;
 141:../common/eeprom.c **** 	uint8_t *config_ptr = config_raw;
 142:../common/eeprom.c **** 	for (i = 0; i < CONFIG_RAW_SIZE; i++)
 143:../common/eeprom.c **** 	{
 144:../common/eeprom.c **** 		if (restore_default)
 145:../common/eeprom.c **** 		{
 146:../common/eeprom.c **** 			*config_ptr = config_default(i); // default value
 147:../common/eeprom.c **** 		}
 148:../common/eeprom.c **** 		else
 149:../common/eeprom.c **** 		{
 150:../common/eeprom.c **** 			*config_ptr = config_value(i);
 151:../common/eeprom.c **** 			if ((*config_ptr < config_min(i)) //min
 152:../common/eeprom.c **** 				|| (*config_ptr > config_max(i)))
 153:../common/eeprom.c **** 			{ //max
 154:../common/eeprom.c **** 				*config_ptr = config_default(i); // default value
 155:../common/eeprom.c **** 			}
 156:../common/eeprom.c **** 		}
 157:../common/eeprom.c **** 		eeprom_config_save(i); // update if default value is restored
 158:../common/eeprom.c **** 		config_ptr++;
 159:../common/eeprom.c **** 	}
 160:../common/eeprom.c **** }
 161:../common/eeprom.c **** 
 162:../common/eeprom.c **** 
 163:../common/eeprom.c **** /*!
 164:../common/eeprom.c ****  *******************************************************************************
 165:../common/eeprom.c ****  *  Update configuration storage
 166:../common/eeprom.c ****  *
 167:../common/eeprom.c ****  *  \note
 168:../common/eeprom.c ****  ******************************************************************************/
 169:../common/eeprom.c **** void eeprom_config_save(uint8_t idx)
 170:../common/eeprom.c **** {
  69               		.loc 1 170 0
  70               		.cfi_startproc
  71               	.LVL6:
  72 0000 EF92      		push r14
  73               	.LCFI0:
  74               		.cfi_def_cfa_offset 3
  75               		.cfi_offset 14, -2
  76 0002 FF92      		push r15
  77               	.LCFI1:
  78               		.cfi_def_cfa_offset 4
  79               		.cfi_offset 15, -3
  80 0004 0F93      		push r16
  81               	.LCFI2:
  82               		.cfi_def_cfa_offset 5
  83               		.cfi_offset 16, -4
  84 0006 1F93      		push r17
  85               	.LCFI3:
  86               		.cfi_def_cfa_offset 6
  87               		.cfi_offset 17, -5
  88 0008 CF93      		push r28
  89               	.LCFI4:
  90               		.cfi_def_cfa_offset 7
  91               		.cfi_offset 28, -6
  92 000a DF93      		push r29
  93               	.LCFI5:
  94               		.cfi_def_cfa_offset 8
  95               		.cfi_offset 29, -7
  96               	/* prologue: function */
  97               	/* frame size = 0 */
  98               	/* stack size = 6 */
  99               	.L__stack_usage = 6
 171:../common/eeprom.c **** 	if (idx < CONFIG_RAW_SIZE)
 100               		.loc 1 171 0
 101 000c 8B32      		cpi r24,lo8(43)
 102 000e 00F4      		brsh .L3
 103 0010 182F      		mov r17,r24
 172:../common/eeprom.c **** 	{
 173:../common/eeprom.c **** 		if (config_raw[idx] != config_value(idx))
 104               		.loc 1 173 0
 105 0012 C82F      		mov r28,r24
 106 0014 D0E0      		ldi r29,0
 107 0016 CE01      		movw r24,r28
 108               	.LVL7:
 109 0018 8050      		subi r24,lo8(-(config))
 110 001a 9040      		sbci r25,hi8(-(config))
 111 001c 7C01      		movw r14,r24
 112 001e FC01      		movw r30,r24
 113 0020 0081      		ld r16,Z
 114 0022 60E0      		ldi r22,0
 115 0024 812F      		mov r24,r17
 116 0026 0E94 0000 		call config_read
 117               	.LVL8:
 118 002a 0817      		cp r16,r24
 119 002c 01F0      		breq .L3
 174:../common/eeprom.c **** 		{
 175:../common/eeprom.c **** 			if ((config_raw[idx] < config_min(idx)) //min
 120               		.loc 1 175 0
 121 002e 62E0      		ldi r22,lo8(2)
 122 0030 812F      		mov r24,r17
 123 0032 0E94 0000 		call config_read
 124               	.LVL9:
 125 0036 0817      		cp r16,r24
 126 0038 00F0      		brlo .L7
 176:../common/eeprom.c **** 				|| (config_raw[idx] > config_max(idx)))
 127               		.loc 1 176 0
 128 003a 63E0      		ldi r22,lo8(3)
 129 003c 812F      		mov r24,r17
 130 003e 0E94 0000 		call config_read
 131               	.LVL10:
 132 0042 8017      		cp r24,r16
 133 0044 00F4      		brsh .L8
 134               	.L7:
 177:../common/eeprom.c **** 			{ //max
 178:../common/eeprom.c **** 				config_raw[idx] = config_default(idx); // default value
 135               		.loc 1 178 0
 136 0046 61E0      		ldi r22,lo8(1)
 137 0048 812F      		mov r24,r17
 138 004a 0E94 0000 		call config_read
 139               	.LVL11:
 140 004e F701      		movw r30,r14
 141 0050 8083      		st Z,r24
 142               	.L8:
 179:../common/eeprom.c **** 			}
 180:../common/eeprom.c **** 			config_write(idx, config_raw[idx]);
 143               		.loc 1 180 0
 144 0052 F701      		movw r30,r14
 145 0054 6081      		ld r22,Z
 146 0056 CE01      		movw r24,r28
 147 0058 880F      		lsl r24
 148 005a 991F      		rol r25
 149 005c 880F      		lsl r24
 150 005e 991F      		rol r25
 151 0060 8050      		subi r24,lo8(-(ee_config))
 152 0062 9040      		sbci r25,hi8(-(ee_config))
 153               	.LVL12:
 154               	.LBB4:
 155               	.LBB5:
 107:../common/eeprom.c **** 	{
 156               		.loc 1 107 0
 157 0064 F0E0      		ldi r31,hi8(ee_config)
 158 0066 8030      		cpi r24,lo8(ee_config)
 159 0068 9F07      		cpc r25,r31
 160 006a 00F0      		brlo .L9
 161 006c 9C01      		movw r18,r24
 162 006e 2370      		andi r18,3
 163 0070 3327      		clr r19
 164 0072 232B      		or r18,r19
 165 0074 01F4      		brne .L3
 166               	.L9:
 113:../common/eeprom.c **** 
 167               		.loc 1 113 0
 168 0076 0E94 0000 		call __eewr_byte_m169p
 169               	.LVL13:
 170               	.L3:
 171               	/* epilogue start */
 172               	.LBE5:
 173               	.LBE4:
 181:../common/eeprom.c **** 		}
 182:../common/eeprom.c **** 	}
 183:../common/eeprom.c **** }
 174               		.loc 1 183 0
 175 007a CDB7      		in r28,__SP_L__
 176 007c DEB7      		in r29,__SP_H__
 177 007e E6E0      		ldi r30, lo8(6)
 178 0080 0C94 0000 		jmp __epilogue_restores__ + ((18 - 6) * 2)
 179               		.cfi_endproc
 180               	.LFE5:
 182               		.section	.text.eeprom_config_init,"ax",@progbits
 183               	.global	eeprom_config_init
 185               	eeprom_config_init:
 186               	.LFB4:
 138:../common/eeprom.c **** 
 187               		.loc 1 138 0
 188               		.cfi_startproc
 189               	.LVL14:
 190 0000 FF92      		push r15
 191               	.LCFI6:
 192               		.cfi_def_cfa_offset 3
 193               		.cfi_offset 15, -2
 194 0002 0F93      		push r16
 195               	.LCFI7:
 196               		.cfi_def_cfa_offset 4
 197               		.cfi_offset 16, -3
 198 0004 1F93      		push r17
 199               	.LCFI8:
 200               		.cfi_def_cfa_offset 5
 201               		.cfi_offset 17, -4
 202 0006 CF93      		push r28
 203               	.LCFI9:
 204               		.cfi_def_cfa_offset 6
 205               		.cfi_offset 28, -5
 206 0008 DF93      		push r29
 207               	.LCFI10:
 208               		.cfi_def_cfa_offset 7
 209               		.cfi_offset 29, -6
 210               	/* prologue: function */
 211               	/* frame size = 0 */
 212               	/* stack size = 5 */
 213               	.L__stack_usage = 5
 214 000a F82E      		mov r15,r24
 215               	.LVL15:
 138:../common/eeprom.c **** 
 216               		.loc 1 138 0
 217 000c C0E0      		ldi r28,0
 141:../common/eeprom.c **** 	for (i = 0; i < CONFIG_RAW_SIZE; i++)
 218               		.loc 1 141 0
 219 000e 00E0      		ldi r16,lo8(config)
 220 0010 10E0      		ldi r17,hi8(config)
 221               	.LVL16:
 222               	.L15:
 144:../common/eeprom.c **** 		{
 223               		.loc 1 144 0
 224 0012 F110      		cpse r15,__zero_reg__
 225 0014 00C0      		rjmp .L14
 150:../common/eeprom.c **** 			if ((*config_ptr < config_min(i)) //min
 226               		.loc 1 150 0
 227 0016 60E0      		ldi r22,0
 228 0018 8C2F      		mov r24,r28
 229 001a 0E94 0000 		call config_read
 230               	.LVL17:
 231 001e D82F      		mov r29,r24
 232 0020 F801      		movw r30,r16
 233 0022 8083      		st Z,r24
 151:../common/eeprom.c **** 				|| (*config_ptr > config_max(i)))
 234               		.loc 1 151 0
 235 0024 62E0      		ldi r22,lo8(2)
 236 0026 8C2F      		mov r24,r28
 237 0028 0E94 0000 		call config_read
 238               	.LVL18:
 239 002c D817      		cp r29,r24
 240 002e 00F0      		brlo .L14
 152:../common/eeprom.c **** 			{ //max
 241               		.loc 1 152 0
 242 0030 63E0      		ldi r22,lo8(3)
 243 0032 8C2F      		mov r24,r28
 244 0034 0E94 0000 		call config_read
 245               	.LVL19:
 246 0038 8D17      		cp r24,r29
 247 003a 00F4      		brsh .L13
 248               	.L14:
 154:../common/eeprom.c **** 			}
 249               		.loc 1 154 0
 250 003c 61E0      		ldi r22,lo8(1)
 251 003e 8C2F      		mov r24,r28
 252 0040 0E94 0000 		call config_read
 253               	.LVL20:
 254 0044 F801      		movw r30,r16
 255 0046 8083      		st Z,r24
 256               	.L13:
 157:../common/eeprom.c **** 		config_ptr++;
 257               		.loc 1 157 0 discriminator 2
 258 0048 8C2F      		mov r24,r28
 259 004a 0E94 0000 		call eeprom_config_save
 260               	.LVL21:
 158:../common/eeprom.c **** 	}
 261               		.loc 1 158 0 discriminator 2
 262 004e 0F5F      		subi r16,-1
 263 0050 1F4F      		sbci r17,-1
 264               	.LVL22:
 265 0052 CF5F      		subi r28,lo8(-(1))
 142:../common/eeprom.c **** 	{
 266               		.loc 1 142 0 discriminator 2
 267 0054 CB32      		cpi r28,lo8(43)
 268 0056 01F4      		brne .L15
 269               	/* epilogue start */
 160:../common/eeprom.c **** 
 270               		.loc 1 160 0
 271 0058 CDB7      		in r28,__SP_L__
 272 005a DEB7      		in r29,__SP_H__
 273 005c E5E0      		ldi r30, lo8(5)
 274 005e 0C94 0000 		jmp __epilogue_restores__ + ((18 - 5) * 2)
 275               		.cfi_endproc
 276               	.LFE4:
 278               		.section	.text.eeprom_timers_read_raw,"ax",@progbits
 279               	.global	eeprom_timers_read_raw
 281               	eeprom_timers_read_raw:
 282               	.LFB6:
 184:../common/eeprom.c **** 
 185:../common/eeprom.c **** #if !defined(MASTER_CONFIG_H)
 186:../common/eeprom.c **** 
 187:../common/eeprom.c **** uint8_t  timmers_patch_offset = 0xff;
 188:../common/eeprom.c **** uint16_t timmers_patch_data;
 189:../common/eeprom.c **** 
 190:../common/eeprom.c **** /*!
 191:../common/eeprom.c ****  *******************************************************************************
 192:../common/eeprom.c ****  *  read timer from storage
 193:../common/eeprom.c ****  *
 194:../common/eeprom.c ****  *  \note
 195:../common/eeprom.c ****  ******************************************************************************/
 196:../common/eeprom.c **** 
 197:../common/eeprom.c **** uint16_t eeprom_timers_read_raw(uint8_t offset)
 198:../common/eeprom.c **** {
 283               		.loc 1 198 0
 284               		.cfi_startproc
 285               	.LVL23:
 286               	/* prologue: function */
 287               	/* frame size = 0 */
 288               	/* stack size = 0 */
 289               	.L__stack_usage = 0
 199:../common/eeprom.c **** 	if (offset != timmers_patch_offset)
 290               		.loc 1 199 0
 291 0000 9091 0000 		lds r25,timmers_patch_offset
 292 0004 8917      		cp r24,r25
 293 0006 01F0      		breq .L18
 294               	.LVL24:
 295               	.LBB6:
 200:../common/eeprom.c **** 	{
 201:../common/eeprom.c **** 		uint16_t eeaddr = (uint16_t)offset * (uint16_t)sizeof(ee_timers[0][0]) + (uint16_t)ee_timers;
 296               		.loc 1 201 0
 297 0008 90E0      		ldi r25,0
 298 000a 880F      		lsl r24
 299 000c 991F      		rol r25
 300               	.LVL25:
 202:../common/eeprom.c **** 		return eeprom_read_word(eeaddr);
 301               		.loc 1 202 0
 302 000e 8050      		subi r24,lo8(-(ee_timers))
 303 0010 9040      		sbci r25,hi8(-(ee_timers))
 304 0012 0E94 0000 		call __eerd_word_m169p
 305               	.LVL26:
 306 0016 0895      		ret
 307               	.LVL27:
 308               	.L18:
 309               	.LBE6:
 203:../common/eeprom.c **** 	}
 204:../common/eeprom.c **** 	else
 205:../common/eeprom.c **** 	{
 206:../common/eeprom.c **** 		return timmers_patch_data;
 310               		.loc 1 206 0
 311 0018 8091 0000 		lds r24,timmers_patch_data
 312 001c 9091 0000 		lds r25,timmers_patch_data+1
 313               	.LVL28:
 207:../common/eeprom.c **** 	}
 208:../common/eeprom.c **** }
 314               		.loc 1 208 0
 315 0020 0895      		ret
 316               		.cfi_endproc
 317               	.LFE6:
 319               		.section	.text.eeprom_timers_write_raw,"ax",@progbits
 320               	.global	eeprom_timers_write_raw
 322               	eeprom_timers_write_raw:
 323               	.LFB8:
 209:../common/eeprom.c **** 
 210:../common/eeprom.c **** int16_t eeprom_timers_write(int16_t dow, int16_t slot, uint16_t value)
 211:../common/eeprom.c **** {
 212:../common/eeprom.c **** 	int16_t address = dow * RTC_TIMERS_PER_DOW + slot;
 213:../common/eeprom.c **** 	return eeprom_timers_write_raw(address, value);
 214:../common/eeprom.c **** }
 215:../common/eeprom.c **** 
 216:../common/eeprom.c **** /*!
 217:../common/eeprom.c ****  *******************************************************************************
 218:../common/eeprom.c ****  *  Update timer storage for dow and slot
 219:../common/eeprom.c ****  *
 220:../common/eeprom.c ****  *  \note
 221:../common/eeprom.c ****  ******************************************************************************/
 222:../common/eeprom.c **** int16_t eeprom_timers_write_raw(int16_t offset, uint16_t value)
 223:../common/eeprom.c **** {
 324               		.loc 1 223 0
 325               		.cfi_startproc
 326               	.LVL29:
 327               	/* prologue: function */
 328               	/* frame size = 0 */
 329               	/* stack size = 0 */
 330               	.L__stack_usage = 0
 224:../common/eeprom.c **** 	if (offset >= (uint8_t)(sizeof(ee_timers) / sizeof(ee_timers[0][0])))
 331               		.loc 1 224 0
 332 0000 8034      		cpi r24,64
 333 0002 9105      		cpc r25,__zero_reg__
 334 0004 04F4      		brge .L22
 335               	.LVL30:
 225:../common/eeprom.c **** 	{
 226:../common/eeprom.c **** 		return -5; // EEPROM protection
 227:../common/eeprom.c **** 	}
 228:../common/eeprom.c **** 
 229:../common/eeprom.c **** 	uint16_t eeaddr = offset * sizeof(ee_timers[0][0]) + (uint16_t)ee_timers;
 336               		.loc 1 229 0
 337 0006 880F      		lsl r24
 338 0008 991F      		rol r25
 339               	.LVL31:
 230:../common/eeprom.c **** 
 231:../common/eeprom.c **** 	eeprom_write_word(eeaddr, value);
 340               		.loc 1 231 0
 341 000a 8050      		subi r24,lo8(-(ee_timers))
 342 000c 9040      		sbci r25,hi8(-(ee_timers))
 343               	.LVL32:
 344 000e 0E94 0000 		call __eewr_word_m169p
 345               	.LVL33:
 232:../common/eeprom.c **** 	return 0;
 346               		.loc 1 232 0
 347 0012 80E0      		ldi r24,0
 348 0014 90E0      		ldi r25,0
 349 0016 0895      		ret
 350               	.LVL34:
 351               	.L22:
 226:../common/eeprom.c **** 	}
 352               		.loc 1 226 0
 353 0018 8BEF      		ldi r24,lo8(-5)
 354 001a 9FEF      		ldi r25,lo8(-1)
 355               	.LVL35:
 233:../common/eeprom.c **** }
 356               		.loc 1 233 0
 357 001c 0895      		ret
 358               		.cfi_endproc
 359               	.LFE8:
 361               		.section	.text.eeprom_timers_write,"ax",@progbits
 362               	.global	eeprom_timers_write
 364               	eeprom_timers_write:
 365               	.LFB7:
 211:../common/eeprom.c **** 	int16_t address = dow * RTC_TIMERS_PER_DOW + slot;
 366               		.loc 1 211 0
 367               		.cfi_startproc
 368               	.LVL36:
 369               	/* prologue: function */
 370               	/* frame size = 0 */
 371               	/* stack size = 0 */
 372               	.L__stack_usage = 0
 373 0000 9B01      		movw r18,r22
 374               	.LVL37:
 212:../common/eeprom.c **** 	return eeprom_timers_write_raw(address, value);
 375               		.loc 1 212 0
 376 0002 63E0      		ldi r22,3
 377               		1:
 378 0004 880F      		lsl r24
 379 0006 991F      		rol r25
 380 0008 6A95      		dec r22
 381 000a 01F4      		brne 1b
 382               	.LVL38:
 213:../common/eeprom.c **** }
 383               		.loc 1 213 0
 384 000c BA01      		movw r22,r20
 385 000e 820F      		add r24,r18
 386 0010 931F      		adc r25,r19
 387               	.LVL39:
 388 0012 0E94 0000 		call eeprom_timers_write_raw
 389               	.LVL40:
 214:../common/eeprom.c **** 
 390               		.loc 1 214 0
 391 0016 0895      		ret
 392               		.cfi_endproc
 393               	.LFE7:
 395               		.comm	timmers_patch_data,2,1
 396               	.global	timmers_patch_offset
 397               		.section	.data.timmers_patch_offset,"aw",@progbits
 400               	timmers_patch_offset:
 401 0000 FF        		.byte	-1
 402               		.comm	config,43,1
 403               	.global	ee_config
 404               		.section	.eeprom,"aw",@progbits
 407               	ee_config:
 408 0000 0E        		.byte	14
 409 0001 0E        		.byte	14
 410 0002 00        		.byte	0
 411 0003 0F        		.byte	15
 412 0004 0A        		.byte	10
 413 0005 0A        		.byte	10
 414 0006 0A        		.byte	10
 415 0007 3C        		.byte	60
 416 0008 22        		.byte	34
 417 0009 22        		.byte	34
 418 000a 0A        		.byte	10
 419 000b 3C        		.byte	60
 420 000c 2A        		.byte	42
 421 000d 2A        		.byte	42
 422 000e 0A        		.byte	10
 423 000f 3C        		.byte	60
 424 0010 30        		.byte	48
 425 0011 30        		.byte	48
 426 0012 0A        		.byte	10
 427 0013 3C        		.byte	60
 428 0014 21        		.byte	33
 429 0015 21        		.byte	33
 430 0016 00        		.byte	0
 431 0017 FF        		.byte	-1
 432 0018 08        		.byte	8
 433 0019 08        		.byte	8
 434 001a 00        		.byte	0
 435 001b FF        		.byte	-1
 436 001c 20        		.byte	32
 437 001d 20        		.byte	32
 438 001e 00        		.byte	0
 439 001f FF        		.byte	-1
 440 0020 28        		.byte	40
 441 0021 28        		.byte	40
 442 0022 00        		.byte	0
 443 0023 7F        		.byte	127
 444 0024 1E        		.byte	30
 445 0025 1E        		.byte	30
 446 0026 00        		.byte	0
 447 0027 FF        		.byte	-1
 448 0028 30        		.byte	48
 449 0029 30        		.byte	48
 450 002a 04        		.byte	4
 451 002b FF        		.byte	-1
 452 002c 1E        		.byte	30
 453 002d 1E        		.byte	30
 454 002e 00        		.byte	0
 455 002f 64        		.byte	100
 456 0030 2D        		.byte	45
 457 0031 2D        		.byte	45
 458 0032 00        		.byte	0
 459 0033 64        		.byte	100
 460 0034 50        		.byte	80
 461 0035 50        		.byte	80
 462 0036 00        		.byte	0
 463 0037 64        		.byte	100
 464 0038 40        		.byte	64
 465 0039 40        		.byte	64
 466 003a 00        		.byte	0
 467 003b 7F        		.byte	127
 468 003c 20        		.byte	32
 469 003d 20        		.byte	32
 470 003e 20        		.byte	32
 471 003f FF        		.byte	-1
 472 0040 FA        		.byte	-6
 473 0041 FA        		.byte	-6
 474 0042 32        		.byte	50
 475 0043 FF        		.byte	-1
 476 0044 64        		.byte	100
 477 0045 64        		.byte	100
 478 0046 01        		.byte	1
 479 0047 FF        		.byte	-1
 480 0048 19        		.byte	25
 481 0049 19        		.byte	25
 482 004a 01        		.byte	1
 483 004b FF        		.byte	-1
 484 004c 4E        		.byte	78
 485 004d 4E        		.byte	78
 486 004e 05        		.byte	5
 487 004f FF        		.byte	-1
 488 0050 82        		.byte	-126
 489 0051 82        		.byte	-126
 490 0052 6E        		.byte	110
 491 0053 FA        		.byte	-6
 492 0054 96        		.byte	-106
 493 0055 96        		.byte	-106
 494 0056 6E        		.byte	110
 495 0057 FA        		.byte	-6
 496 0058 B8        		.byte	-72
 497 0059 B8        		.byte	-72
 498 005a 0A        		.byte	10
 499 005b FF        		.byte	-1
 500 005c 32        		.byte	50
 501 005d 32        		.byte	50
 502 005e 0A        		.byte	10
 503 005f C8        		.byte	-56
 504 0060 0A        		.byte	10
 505 0061 0A        		.byte	10
 506 0062 01        		.byte	1
 507 0063 40        		.byte	64
 508 0064 FF        		.byte	-1
 509 0065 FF        		.byte	-1
 510 0066 00        		.byte	0
 511 0067 FF        		.byte	-1
 512 0068 FF        		.byte	-1
 513 0069 FF        		.byte	-1
 514 006a 00        		.byte	0
 515 006b FF        		.byte	-1
 516 006c 27        		.byte	39
 517 006d 27        		.byte	39
 518 006e 00        		.byte	0
 519 006f FF        		.byte	-1
 520 0070 2D        		.byte	45
 521 0071 2D        		.byte	45
 522 0072 10        		.byte	16
 523 0073 FF        		.byte	-1
 524 0074 39        		.byte	57
 525 0075 39        		.byte	57
 526 0076 10        		.byte	16
 527 0077 FF        		.byte	-1
 528 0078 4B        		.byte	75
 529 0079 4B        		.byte	75
 530 007a 10        		.byte	16
 531 007b FF        		.byte	-1
 532 007c 4D        		.byte	77
 533 007d 4D        		.byte	77
 534 007e 10        		.byte	16
 535 007f FF        		.byte	-1
 536 0080 41        		.byte	65
 537 0081 41        		.byte	65
 538 0082 10        		.byte	16
 539 0083 FF        		.byte	-1
 540 0084 3D        		.byte	61
 541 0085 3D        		.byte	61
 542 0086 10        		.byte	16
 543 0087 FF        		.byte	-1
 544 0088 00        		.byte	0
 545 0089 00        		.byte	0
 546 008a 00        		.byte	0
 547 008b 01        		.byte	1
 548 008c 78        		.byte	120
 549 008d 78        		.byte	120
 550 008e 50        		.byte	80
 551 008f A0        		.byte	-96
 552 0090 64        		.byte	100
 553 0091 64        		.byte	100
 554 0092 50        		.byte	80
 555 0093 A0        		.byte	-96
 556 0094 01        		.byte	1
 557 0095 01        		.byte	1
 558 0096 00        		.byte	0
 559 0097 01        		.byte	1
 560 0098 32        		.byte	50
 561 0099 32        		.byte	50
 562 009a 07        		.byte	7
 563 009b FF        		.byte	-1
 564 009c 32        		.byte	50
 565 009d 32        		.byte	50
 566 009e 07        		.byte	7
 567 009f FF        		.byte	-1
 568 00a0 08        		.byte	8
 569 00a1 08        		.byte	8
 570 00a2 01        		.byte	1
 571 00a3 20        		.byte	32
 572 00a4 08        		.byte	8
 573 00a5 08        		.byte	8
 574 00a6 01        		.byte	1
 575 00a7 20        		.byte	32
 576 00a8 5A        		.byte	90
 577 00a9 5A        		.byte	90
 578 00aa 02        		.byte	2
 579 00ab FF        		.byte	-1
 580               	.global	ee_reserved2_60
 583               	ee_reserved2_60:
 584 00ac FF        		.byte	-1
 585 00ad FF        		.byte	-1
 586 00ae FF        		.byte	-1
 587 00af FF        		.byte	-1
 588 00b0 FF        		.byte	-1
 589 00b1 FF        		.byte	-1
 590 00b2 FF        		.byte	-1
 591 00b3 FF        		.byte	-1
 592 00b4 FF        		.byte	-1
 593 00b5 FF        		.byte	-1
 594 00b6 FF        		.byte	-1
 595 00b7 FF        		.byte	-1
 596 00b8 FF        		.byte	-1
 597 00b9 FF        		.byte	-1
 598 00ba FF        		.byte	-1
 599 00bb FF        		.byte	-1
 600 00bc FF        		.byte	-1
 601 00bd FF        		.byte	-1
 602 00be FF        		.byte	-1
 603 00bf FF        		.byte	-1
 604 00c0 FF        		.byte	-1
 605 00c1 FF        		.byte	-1
 606 00c2 FF        		.byte	-1
 607 00c3 FF        		.byte	-1
 608 00c4 FF        		.byte	-1
 609 00c5 FF        		.byte	-1
 610 00c6 FF        		.byte	-1
 611 00c7 FF        		.byte	-1
 612 00c8 FF        		.byte	-1
 613 00c9 FF        		.byte	-1
 614 00ca FF        		.byte	-1
 615 00cb FF        		.byte	-1
 616 00cc FF        		.byte	-1
 617 00cd FF        		.byte	-1
 618 00ce FF        		.byte	-1
 619 00cf FF        		.byte	-1
 620 00d0 FF        		.byte	-1
 621 00d1 FF        		.byte	-1
 622 00d2 FF        		.byte	-1
 623 00d3 FF        		.byte	-1
 624 00d4 FF        		.byte	-1
 625 00d5 FF        		.byte	-1
 626 00d6 FF        		.byte	-1
 627 00d7 FF        		.byte	-1
 628 00d8 FF        		.byte	-1
 629 00d9 FF        		.byte	-1
 630 00da FF        		.byte	-1
 631 00db FF        		.byte	-1
 632 00dc FF        		.byte	-1
 633 00dd FF        		.byte	-1
 634 00de FF        		.byte	-1
 635 00df FF        		.byte	-1
 636 00e0 FF        		.byte	-1
 637 00e1 FF        		.byte	-1
 638 00e2 FF        		.byte	-1
 639 00e3 FF        		.byte	-1
 640 00e4 FF        		.byte	-1
 641 00e5 FF        		.byte	-1
 642 00e6 FF        		.byte	-1
 643 00e7 FF        		.byte	-1
 644               	.global	ee_timers
 647               	ee_timers:
 648 00e8 D621      		.word	8662
 649 00ea EC14      		.word	5356
 650 00ec FF2F      		.word	12287
 651 00ee FF1F      		.word	8191
 652 00f0 FF2F      		.word	12287
 653 00f2 FF1F      		.word	8191
 654 00f4 FF2F      		.word	12287
 655 00f6 FF1F      		.word	8191
 656 00f8 D621      		.word	8662
 657 00fa EC14      		.word	5356
 658 00fc FF2F      		.word	12287
 659 00fe FF1F      		.word	8191
 660 0100 FF2F      		.word	12287
 661 0102 FF1F      		.word	8191
 662 0104 FF2F      		.word	12287
 663 0106 FF1F      		.word	8191
 664 0108 D621      		.word	8662
 665 010a EC14      		.word	5356
 666 010c FF2F      		.word	12287
 667 010e FF1F      		.word	8191
 668 0110 FF2F      		.word	12287
 669 0112 FF1F      		.word	8191
 670 0114 FF2F      		.word	12287
 671 0116 FF1F      		.word	8191
 672 0118 D621      		.word	8662
 673 011a EC14      		.word	5356
 674 011c FF2F      		.word	12287
 675 011e FF1F      		.word	8191
 676 0120 FF2F      		.word	12287
 677 0122 FF1F      		.word	8191
 678 0124 FF2F      		.word	12287
 679 0126 FF1F      		.word	8191
 680 0128 D621      		.word	8662
 681 012a EC14      		.word	5356
 682 012c FF2F      		.word	12287
 683 012e FF1F      		.word	8191
 684 0130 FF2F      		.word	12287
 685 0132 FF1F      		.word	8191
 686 0134 FF2F      		.word	12287
 687 0136 FF1F      		.word	8191
 688 0138 D621      		.word	8662
 689 013a EC14      		.word	5356
 690 013c FF2F      		.word	12287
 691 013e FF1F      		.word	8191
 692 0140 FF2F      		.word	12287
 693 0142 FF1F      		.word	8191
 694 0144 FF2F      		.word	12287
 695 0146 FF1F      		.word	8191
 696 0148 D621      		.word	8662
 697 014a EC14      		.word	5356
 698 014c FF2F      		.word	12287
 699 014e FF1F      		.word	8191
 700 0150 FF2F      		.word	12287
 701 0152 FF1F      		.word	8191
 702 0154 FF2F      		.word	12287
 703 0156 FF1F      		.word	8191
 704 0158 D621      		.word	8662
 705 015a EC14      		.word	5356
 706 015c FF2F      		.word	12287
 707 015e FF1F      		.word	8191
 708 0160 FF2F      		.word	12287
 709 0162 FF1F      		.word	8191
 710 0164 FF2F      		.word	12287
 711 0166 FF1F      		.word	8191
 712               	.global	ee_layout
 715               	ee_layout:
 716 0168 14        		.byte	20
 717               	.global	ee_reserved3
 720               	ee_reserved3:
 721 0169 00        		.zero	1
 722               	.global	ee_reserved2
 725               	ee_reserved2:
 726 016a 00        		.zero	1
 727               	.global	ee_reserved1
 730               	ee_reserved1:
 731 016b 00        		.zero	1
 732               		.text
 733               	.Letext0:
 734               		.file 2 "q:\\winavr\\avr\\include\\stdint.h"
 735               		.file 3 "./config.h"
 736               		.file 4 "./eeprom.h"
 737               		.file 5 "q:\\winavr\\avr\\include\\avr\\eeprom.h"
DEFINED SYMBOLS
                            *ABS*:00000000 eeprom.c
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:2      *ABS*:0000003e __SP_H__
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:3      *ABS*:0000003d __SP_L__
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:4      *ABS*:0000003f __SREG__
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:6      *ABS*:00000001 __zero_reg__
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:13     .text.EEPROM_read:00000000 EEPROM_read
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:34     .text.config_read:00000000 config_read
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:407    .eeprom:00000000 ee_config
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:67     .text.eeprom_config_save:00000000 eeprom_config_save
                            *COM*:0000002b config
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:185    .text.eeprom_config_init:00000000 eeprom_config_init
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:281    .text.eeprom_timers_read_raw:00000000 eeprom_timers_read_raw
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:400    .data.timmers_patch_offset:00000000 timmers_patch_offset
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:647    .eeprom:000000e8 ee_timers
                            *COM*:00000002 timmers_patch_data
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:322    .text.eeprom_timers_write_raw:00000000 eeprom_timers_write_raw
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:364    .text.eeprom_timers_write:00000000 eeprom_timers_write
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:583    .eeprom:000000ac ee_reserved2_60
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:715    .eeprom:00000168 ee_layout
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:720    .eeprom:00000169 ee_reserved3
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:725    .eeprom:0000016a ee_reserved2
C:\Users\Kaworu\AppData\Local\Temp\ccmUbr3j.s:730    .eeprom:0000016b ee_reserved1

UNDEFINED SYMBOLS
__eerd_byte_m169p
__eewr_byte_m169p
__epilogue_restores__
__eerd_word_m169p
__eewr_word_m169p
__do_copy_data
__do_clear_bss

   1               		.file	"rs232_485_hw.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.__vector_13,"ax",@progbits
  11               	.global	__vector_13
  13               	__vector_13:
  14               	.LFB2:
  15               		.file 1 "../common/rs232_485_hw.c"
   1:../common/rs232_485_hw.c **** /*
   2:../common/rs232_485_hw.c ****  *  Open HR20
   3:../common/rs232_485_hw.c ****  *
   4:../common/rs232_485_hw.c ****  *  target:     ATmega169 in Honnywell Rondostat HR20E / ATmega32
   5:../common/rs232_485_hw.c ****  *
   6:../common/rs232_485_hw.c ****  *  compiler:   WinAVR-20071221
   7:../common/rs232_485_hw.c ****  *              avr-libc 1.6.0
   8:../common/rs232_485_hw.c ****  *              GCC 4.2.2
   9:../common/rs232_485_hw.c ****  *
  10:../common/rs232_485_hw.c ****  *  copyright:  2008 Juergen Sachs (juergen-sachs-at-gmx-dot-de)
  11:../common/rs232_485_hw.c ****  *				2008 Jiri Dobry (jdobry-at-centrum-dot-cz)
  12:../common/rs232_485_hw.c ****  *
  13:../common/rs232_485_hw.c ****  *  license:    This program is free software; you can redistribute it and/or
  14:../common/rs232_485_hw.c ****  *              modify it under the terms of the GNU Library General Public
  15:../common/rs232_485_hw.c ****  *              License as published by the Free Software Foundation; either
  16:../common/rs232_485_hw.c ****  *              version 2 of the License, or (at your option) any later version.
  17:../common/rs232_485_hw.c ****  *
  18:../common/rs232_485_hw.c ****  *              This program is distributed in the hope that it will be useful,
  19:../common/rs232_485_hw.c ****  *              but WITHOUT ANY WARRANTY; without even the implied warranty of
  20:../common/rs232_485_hw.c ****  *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  21:../common/rs232_485_hw.c ****  *              GNU General Public License for more details.
  22:../common/rs232_485_hw.c ****  *
  23:../common/rs232_485_hw.c ****  *              You should have received a copy of the GNU General Public License
  24:../common/rs232_485_hw.c ****  *              along with this program. If not, see http:*www.gnu.org/licenses
  25:../common/rs232_485_hw.c ****  */
  26:../common/rs232_485_hw.c **** 
  27:../common/rs232_485_hw.c **** /*!
  28:../common/rs232_485_hw.c ****  * \file       rs232_485_hw.c
  29:../common/rs232_485_hw.c ****  * \brief      hardware layer of the rs232 and rs485
  30:../common/rs232_485_hw.c ****  * \author     Juergen Sachs (juergen-sachs-at-gmx-dot-de); Jiri Dobry <jdobry-at-centrum-dot-cz>
  31:../common/rs232_485_hw.c ****  * \date       $Date: 2011-11-15 01:08:52 +0100 (Wt, 15 lis 2011) $
  32:../common/rs232_485_hw.c ****  * $Rev: 364 $
  33:../common/rs232_485_hw.c ****  */
  34:../common/rs232_485_hw.c **** 
  35:../common/rs232_485_hw.c **** // AVR LibC includes
  36:../common/rs232_485_hw.c **** #include <stdint.h>
  37:../common/rs232_485_hw.c **** #include <avr/io.h>
  38:../common/rs232_485_hw.c **** #include <stdio.h>
  39:../common/rs232_485_hw.c **** 
  40:../common/rs232_485_hw.c **** // HR20 Project includes
  41:../common/rs232_485_hw.c **** #include "config.h"
  42:../common/rs232_485_hw.c **** #include "main.h"
  43:../common/rs232_485_hw.c **** #include "com.h"
  44:../common/rs232_485_hw.c **** 
  45:../common/rs232_485_hw.c **** /* The following must be AFTER the last include line */
  46:../common/rs232_485_hw.c **** #if (defined COM_RS232) || (defined COM_RS485)
  47:../common/rs232_485_hw.c **** 
  48:../common/rs232_485_hw.c **** #if defined (_AVR_IOM169_H_) || defined (_AVR_IOM32_H_)
  49:../common/rs232_485_hw.c **** #define UDR0 UDR
  50:../common/rs232_485_hw.c **** #define RXEN0 RXEN
  51:../common/rs232_485_hw.c **** #define RXCIE0 RXCIE
  52:../common/rs232_485_hw.c **** #define UCSR0A UCSRA
  53:../common/rs232_485_hw.c **** #define UCSR0B UCSRB
  54:../common/rs232_485_hw.c **** #define TXC0 TXC
  55:../common/rs232_485_hw.c **** #define TXCIE0 TXCIE
  56:../common/rs232_485_hw.c **** #define UDRIE0 UDRIE
  57:../common/rs232_485_hw.c **** #define TXEN0 TXEN
  58:../common/rs232_485_hw.c **** #define UBRR0H UBRRH
  59:../common/rs232_485_hw.c **** #define UBRR0L UBRRL
  60:../common/rs232_485_hw.c **** #define UCSR0C UCSRC
  61:../common/rs232_485_hw.c **** #define UCSZ00 UCSZ0
  62:../common/rs232_485_hw.c **** #define UCSZ01 UCSZ1
  63:../common/rs232_485_hw.c **** #define U2X0 U2X
  64:../common/rs232_485_hw.c **** #define URSEL0 URSEL
  65:../common/rs232_485_hw.c **** #endif
  66:../common/rs232_485_hw.c **** 
  67:../common/rs232_485_hw.c **** /*!
  68:../common/rs232_485_hw.c ****  *******************************************************************************
  69:../common/rs232_485_hw.c ****  *  Interrupt for receiving bytes from serial port
  70:../common/rs232_485_hw.c ****  *
  71:../common/rs232_485_hw.c ****  *  \note
  72:../common/rs232_485_hw.c ****  ******************************************************************************/
  73:../common/rs232_485_hw.c **** #if defined (_AVR_IOM169P_H_) || defined (_AVR_IOM169_H_) || defined (_AVR_IOM329_H_)
  74:../common/rs232_485_hw.c **** ISR(USART0_RX_vect)
  75:../common/rs232_485_hw.c **** #elif defined(_AVR_IOM16_H_) || defined(_AVR_IOM32_H_)
  76:../common/rs232_485_hw.c **** ISR(USART_RXC_vect)
  77:../common/rs232_485_hw.c **** #endif
  78:../common/rs232_485_hw.c **** {
  16               		.loc 1 78 0
  17               		.cfi_startproc
  18 0000 1F92      		push r1
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 1, -2
  22 0002 0F92      		push r0
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 0, -3
  26 0004 0FB6      		in r0,__SREG__
  27 0006 0F92      		push r0
  28 0008 1124      		clr __zero_reg__
  29 000a 2F93      		push r18
  30               	.LCFI2:
  31               		.cfi_def_cfa_offset 5
  32               		.cfi_offset 18, -4
  33 000c 3F93      		push r19
  34               	.LCFI3:
  35               		.cfi_def_cfa_offset 6
  36               		.cfi_offset 19, -5
  37 000e 4F93      		push r20
  38               	.LCFI4:
  39               		.cfi_def_cfa_offset 7
  40               		.cfi_offset 20, -6
  41 0010 5F93      		push r21
  42               	.LCFI5:
  43               		.cfi_def_cfa_offset 8
  44               		.cfi_offset 21, -7
  45 0012 6F93      		push r22
  46               	.LCFI6:
  47               		.cfi_def_cfa_offset 9
  48               		.cfi_offset 22, -8
  49 0014 7F93      		push r23
  50               	.LCFI7:
  51               		.cfi_def_cfa_offset 10
  52               		.cfi_offset 23, -9
  53 0016 8F93      		push r24
  54               	.LCFI8:
  55               		.cfi_def_cfa_offset 11
  56               		.cfi_offset 24, -10
  57 0018 9F93      		push r25
  58               	.LCFI9:
  59               		.cfi_def_cfa_offset 12
  60               		.cfi_offset 25, -11
  61 001a AF93      		push r26
  62               	.LCFI10:
  63               		.cfi_def_cfa_offset 13
  64               		.cfi_offset 26, -12
  65 001c BF93      		push r27
  66               	.LCFI11:
  67               		.cfi_def_cfa_offset 14
  68               		.cfi_offset 27, -13
  69 001e EF93      		push r30
  70               	.LCFI12:
  71               		.cfi_def_cfa_offset 15
  72               		.cfi_offset 30, -14
  73 0020 FF93      		push r31
  74               	.LCFI13:
  75               		.cfi_def_cfa_offset 16
  76               		.cfi_offset 31, -15
  77               	/* prologue: Signal */
  78               	/* frame size = 0 */
  79               	/* stack size = 15 */
  80               	.L__stack_usage = 15
  79:../common/rs232_485_hw.c **** 	COM_rx_char_isr(UDR0);	// Add char to input buffer
  81               		.loc 1 79 0
  82 0022 8091 C600 		lds r24,198
  83 0026 0E94 0000 		call COM_rx_char_isr
  84               	.LVL0:
  80:../common/rs232_485_hw.c **** #if !defined(MASTER_CONFIG_H)
  81:../common/rs232_485_hw.c **** 	UCSR0B &= ~(_BV(RXEN0) | _BV(RXCIE0)); // disable receive
  85               		.loc 1 81 0
  86 002a E1EC      		ldi r30,lo8(-63)
  87 002c F0E0      		ldi r31,0
  88 002e 8081      		ld r24,Z
  89 0030 8F76      		andi r24,lo8(111)
  90 0032 8083      		st Z,r24
  82:../common/rs232_485_hw.c **** #endif
  83:../common/rs232_485_hw.c **** #if !defined(_AVR_IOM16_H_) && !defined(_AVR_IOM32_H_)
  84:../common/rs232_485_hw.c **** 	PCMSK0 |= (1 << PCINT0); // activate interrupt
  91               		.loc 1 84 0
  92 0034 EBE6      		ldi r30,lo8(107)
  93 0036 F0E0      		ldi r31,0
  94 0038 8081      		ld r24,Z
  95 003a 8160      		ori r24,lo8(1)
  96 003c 8083      		st Z,r24
  97               	/* epilogue start */
  85:../common/rs232_485_hw.c **** #endif
  86:../common/rs232_485_hw.c **** }
  98               		.loc 1 86 0
  99 003e FF91      		pop r31
 100 0040 EF91      		pop r30
 101 0042 BF91      		pop r27
 102 0044 AF91      		pop r26
 103 0046 9F91      		pop r25
 104 0048 8F91      		pop r24
 105 004a 7F91      		pop r23
 106 004c 6F91      		pop r22
 107 004e 5F91      		pop r21
 108 0050 4F91      		pop r20
 109 0052 3F91      		pop r19
 110 0054 2F91      		pop r18
 111 0056 0F90      		pop r0
 112 0058 0FBE      		out __SREG__,r0
 113 005a 0F90      		pop r0
 114 005c 1F90      		pop r1
 115 005e 1895      		reti
 116               		.cfi_endproc
 117               	.LFE2:
 119               		.section	.text.__vector_14,"ax",@progbits
 120               	.global	__vector_14
 122               	__vector_14:
 123               	.LFB3:
  87:../common/rs232_485_hw.c **** 
  88:../common/rs232_485_hw.c **** /*!
  89:../common/rs232_485_hw.c ****  *******************************************************************************
  90:../common/rs232_485_hw.c ****  *  Interrupt, we can send one more byte to serial port
  91:../common/rs232_485_hw.c ****  *
  92:../common/rs232_485_hw.c ****  *  \note
  93:../common/rs232_485_hw.c ****  *  - We send one byte
  94:../common/rs232_485_hw.c ****  *  - If we have send all, disable interrupt
  95:../common/rs232_485_hw.c ****  ******************************************************************************/
  96:../common/rs232_485_hw.c **** #if defined (_AVR_IOM169P_H_) || defined(_AVR_IOM329_H_)
  97:../common/rs232_485_hw.c **** ISR(USART0_UDRE_vect)
  98:../common/rs232_485_hw.c **** #elif defined(_AVR_IOM169_H_) || defined(_AVR_IOM16_H_)  || defined(_AVR_IOM32_H_)
  99:../common/rs232_485_hw.c **** ISR(USART_UDRE_vect)
 100:../common/rs232_485_hw.c **** #endif
 101:../common/rs232_485_hw.c **** {
 124               		.loc 1 101 0
 125               		.cfi_startproc
 126 0000 1F92      		push r1
 127               	.LCFI14:
 128               		.cfi_def_cfa_offset 3
 129               		.cfi_offset 1, -2
 130 0002 0F92      		push r0
 131               	.LCFI15:
 132               		.cfi_def_cfa_offset 4
 133               		.cfi_offset 0, -3
 134 0004 0FB6      		in r0,__SREG__
 135 0006 0F92      		push r0
 136 0008 1124      		clr __zero_reg__
 137 000a 2F93      		push r18
 138               	.LCFI16:
 139               		.cfi_def_cfa_offset 5
 140               		.cfi_offset 18, -4
 141 000c 3F93      		push r19
 142               	.LCFI17:
 143               		.cfi_def_cfa_offset 6
 144               		.cfi_offset 19, -5
 145 000e 4F93      		push r20
 146               	.LCFI18:
 147               		.cfi_def_cfa_offset 7
 148               		.cfi_offset 20, -6
 149 0010 5F93      		push r21
 150               	.LCFI19:
 151               		.cfi_def_cfa_offset 8
 152               		.cfi_offset 21, -7
 153 0012 6F93      		push r22
 154               	.LCFI20:
 155               		.cfi_def_cfa_offset 9
 156               		.cfi_offset 22, -8
 157 0014 7F93      		push r23
 158               	.LCFI21:
 159               		.cfi_def_cfa_offset 10
 160               		.cfi_offset 23, -9
 161 0016 8F93      		push r24
 162               	.LCFI22:
 163               		.cfi_def_cfa_offset 11
 164               		.cfi_offset 24, -10
 165 0018 9F93      		push r25
 166               	.LCFI23:
 167               		.cfi_def_cfa_offset 12
 168               		.cfi_offset 25, -11
 169 001a AF93      		push r26
 170               	.LCFI24:
 171               		.cfi_def_cfa_offset 13
 172               		.cfi_offset 26, -12
 173 001c BF93      		push r27
 174               	.LCFI25:
 175               		.cfi_def_cfa_offset 14
 176               		.cfi_offset 27, -13
 177 001e EF93      		push r30
 178               	.LCFI26:
 179               		.cfi_def_cfa_offset 15
 180               		.cfi_offset 30, -14
 181 0020 FF93      		push r31
 182               	.LCFI27:
 183               		.cfi_def_cfa_offset 16
 184               		.cfi_offset 31, -15
 185               	/* prologue: Signal */
 186               	/* frame size = 0 */
 187               	/* stack size = 15 */
 188               	.L__stack_usage = 15
 102:../common/rs232_485_hw.c **** 	char c;
 103:../common/rs232_485_hw.c **** 	if ((c = COM_tx_char_isr()) != '\0')
 189               		.loc 1 103 0
 190 0022 0E94 0000 		call COM_tx_char_isr
 191               	.LVL1:
 192 0026 8823      		tst r24
 193 0028 01F0      		breq .L3
 104:../common/rs232_485_hw.c **** 	{
 105:../common/rs232_485_hw.c **** 		UDR0 = c;
 194               		.loc 1 105 0
 195 002a 8093 C600 		sts 198,r24
 196 002e 00C0      		rjmp .L2
 197               	.L3:
 106:../common/rs232_485_hw.c **** 	}
 107:../common/rs232_485_hw.c **** 	else	// no more chars, disable Interrupt
 108:../common/rs232_485_hw.c **** 	{
 109:../common/rs232_485_hw.c **** 		UCSR0B &= ~(_BV(UDRIE0));
 198               		.loc 1 109 0
 199 0030 8091 C100 		lds r24,193
 200               	.LVL2:
 201 0034 8F7D      		andi r24,lo8(-33)
 202 0036 8093 C100 		sts 193,r24
 110:../common/rs232_485_hw.c **** 		UCSR0A |= _BV(TXC0); // clear interrupt flag
 203               		.loc 1 110 0
 204 003a 8091 C000 		lds r24,192
 205 003e 8064      		ori r24,lo8(64)
 206 0040 8093 C000 		sts 192,r24
 111:../common/rs232_485_hw.c **** 		UCSR0B |= (_BV(TXCIE0));
 207               		.loc 1 111 0
 208 0044 8091 C100 		lds r24,193
 209 0048 8064      		ori r24,lo8(64)
 210 004a 8093 C100 		sts 193,r24
 211               	.L2:
 212               	/* epilogue start */
 112:../common/rs232_485_hw.c **** 	}
 113:../common/rs232_485_hw.c **** }
 213               		.loc 1 113 0
 214 004e FF91      		pop r31
 215 0050 EF91      		pop r30
 216 0052 BF91      		pop r27
 217 0054 AF91      		pop r26
 218 0056 9F91      		pop r25
 219 0058 8F91      		pop r24
 220 005a 7F91      		pop r23
 221 005c 6F91      		pop r22
 222 005e 5F91      		pop r21
 223 0060 4F91      		pop r20
 224 0062 3F91      		pop r19
 225 0064 2F91      		pop r18
 226 0066 0F90      		pop r0
 227 0068 0FBE      		out __SREG__,r0
 228 006a 0F90      		pop r0
 229 006c 1F90      		pop r1
 230 006e 1895      		reti
 231               		.cfi_endproc
 232               	.LFE3:
 234               		.section	.text.__vector_15,"ax",@progbits
 235               	.global	__vector_15
 237               	__vector_15:
 238               	.LFB4:
 114:../common/rs232_485_hw.c **** 
 115:../common/rs232_485_hw.c **** /*!
 116:../common/rs232_485_hw.c ****  *******************************************************************************
 117:../common/rs232_485_hw.c ****  *  Interrupt for transmit done
 118:../common/rs232_485_hw.c ****  *
 119:../common/rs232_485_hw.c ****  *  \note
 120:../common/rs232_485_hw.c ****  ******************************************************************************/
 121:../common/rs232_485_hw.c **** #if defined (_AVR_IOM169P_H_) || defined (_AVR_IOM169_H_) || defined(_AVR_IOM329_H_)
 122:../common/rs232_485_hw.c **** ISR(USART0_TX_vect)
 123:../common/rs232_485_hw.c **** #elif defined(_AVR_IOM16_H_) || defined(_AVR_IOM32_H_)
 124:../common/rs232_485_hw.c **** ISR(USART_TXC_vect)
 125:../common/rs232_485_hw.c **** #endif
 126:../common/rs232_485_hw.c **** {
 239               		.loc 1 126 0
 240               		.cfi_startproc
 241 0000 1F92      		push r1
 242               	.LCFI28:
 243               		.cfi_def_cfa_offset 3
 244               		.cfi_offset 1, -2
 245 0002 0F92      		push r0
 246               	.LCFI29:
 247               		.cfi_def_cfa_offset 4
 248               		.cfi_offset 0, -3
 249 0004 0FB6      		in r0,__SREG__
 250 0006 0F92      		push r0
 251 0008 1124      		clr __zero_reg__
 252 000a 8F93      		push r24
 253               	.LCFI30:
 254               		.cfi_def_cfa_offset 5
 255               		.cfi_offset 24, -4
 256 000c EF93      		push r30
 257               	.LCFI31:
 258               		.cfi_def_cfa_offset 6
 259               		.cfi_offset 30, -5
 260 000e FF93      		push r31
 261               	.LCFI32:
 262               		.cfi_def_cfa_offset 7
 263               		.cfi_offset 31, -6
 264               	/* prologue: Signal */
 265               	/* frame size = 0 */
 266               	/* stack size = 6 */
 267               	.L__stack_usage = 6
 127:../common/rs232_485_hw.c **** #if defined COM_RS485
 128:../common/rs232_485_hw.c **** 	// TODO: change rs485 to receive
 129:../common/rs232_485_hw.c **** #error "code is not complete for rs485"
 130:../common/rs232_485_hw.c **** #endif
 131:../common/rs232_485_hw.c **** 	UCSR0B &= ~(_BV(TXCIE0) | _BV(TXEN0));
 268               		.loc 1 131 0
 269 0010 E1EC      		ldi r30,lo8(-63)
 270 0012 F0E0      		ldi r31,0
 271 0014 8081      		ld r24,Z
 272 0016 877B      		andi r24,lo8(-73)
 273 0018 8083      		st Z,r24
 274               	/* epilogue start */
 132:../common/rs232_485_hw.c **** }
 275               		.loc 1 132 0
 276 001a FF91      		pop r31
 277 001c EF91      		pop r30
 278 001e 8F91      		pop r24
 279 0020 0F90      		pop r0
 280 0022 0FBE      		out __SREG__,r0
 281 0024 0F90      		pop r0
 282 0026 1F90      		pop r1
 283 0028 1895      		reti
 284               		.cfi_endproc
 285               	.LFE4:
 287               		.section	.text.RS_Init,"ax",@progbits
 288               	.global	RS_Init
 290               	RS_Init:
 291               	.LFB5:
 133:../common/rs232_485_hw.c **** 
 134:../common/rs232_485_hw.c **** /*!
 135:../common/rs232_485_hw.c ****  *******************************************************************************
 136:../common/rs232_485_hw.c ****  *  Initialize serial, setup Baudrate
 137:../common/rs232_485_hw.c ****  *
 138:../common/rs232_485_hw.c ****  *  \note
 139:../common/rs232_485_hw.c ****  *  - set Baudrate
 140:../common/rs232_485_hw.c ****  ******************************************************************************/
 141:../common/rs232_485_hw.c **** void RS_Init(void)
 142:../common/rs232_485_hw.c **** {
 292               		.loc 1 142 0
 293               		.cfi_startproc
 294               	/* prologue: function */
 295               	/* frame size = 0 */
 296               	/* stack size = 0 */
 297               	.L__stack_usage = 0
 298               	.LVL3:
 143:../common/rs232_485_hw.c **** 
 144:../common/rs232_485_hw.c **** 	// Baudrate
 145:../common/rs232_485_hw.c **** 	//long ubrr_val = ((F_CPU)/(baud*8L)-1);
 146:../common/rs232_485_hw.c **** 	uint16_t ubrr_val = ((F_CPU) / (COM_BAUD_RATE * 8L) - 1);
 147:../common/rs232_485_hw.c **** 
 148:../common/rs232_485_hw.c **** 	UCSR0A = _BV(U2X0);
 299               		.loc 1 148 0
 300 0000 82E0      		ldi r24,lo8(2)
 301 0002 8093 C000 		sts 192,r24
 149:../common/rs232_485_hw.c **** 	UBRR0H = (unsigned char)(ubrr_val >> 8);
 302               		.loc 1 149 0
 303 0006 1092 C500 		sts 197,__zero_reg__
 150:../common/rs232_485_hw.c **** 	UBRR0L = (unsigned char)(ubrr_val & 0xFF);
 304               		.loc 1 150 0
 305 000a 83E3      		ldi r24,lo8(51)
 306 000c 8093 C400 		sts 196,r24
 151:../common/rs232_485_hw.c **** 	UCSR0C = (_BV(UCSZ00) | _BV(UCSZ01));     // Asynchron 8N1 
 307               		.loc 1 151 0
 308 0010 E2EC      		ldi r30,lo8(-62)
 309 0012 F0E0      		ldi r31,0
 310 0014 86E0      		ldi r24,lo8(6)
 311 0016 8083      		st Z,r24
 152:../common/rs232_485_hw.c **** #if defined(_AVR_IOM16_H_) || defined(_AVR_IOM32_H_)
 153:../common/rs232_485_hw.c **** 	UCSR0C = (1 << URSEL0) | (_BV(UCSZ00) | _BV(UCSZ01));     // Asynchron 8N1
 154:../common/rs232_485_hw.c **** #if defined(MASTER_CONFIG_H)
 155:../common/rs232_485_hw.c **** 	UCSR0B = _BV(RXCIE0) | _BV(RXEN0);
 156:../common/rs232_485_hw.c **** #endif
 157:../common/rs232_485_hw.c **** #else 
 158:../common/rs232_485_hw.c **** 	UCSR0C = (_BV(UCSZ00) | _BV(UCSZ01));     // Asynchron 8N1
 312               		.loc 1 158 0
 313 0018 8083      		st Z,r24
 159:../common/rs232_485_hw.c **** #endif
 160:../common/rs232_485_hw.c **** #if !defined(_AVR_IOM16_H_) && !defined(_AVR_IOM32_H_)
 161:../common/rs232_485_hw.c **** 	PCMSK0 |= (1 << PCINT0); // activate interrupt
 314               		.loc 1 161 0
 315 001a EBE6      		ldi r30,lo8(107)
 316 001c F0E0      		ldi r31,0
 317 001e 8081      		ld r24,Z
 318 0020 8160      		ori r24,lo8(1)
 319 0022 8083      		st Z,r24
 320 0024 0895      		ret
 321               		.cfi_endproc
 322               	.LFE5:
 324               		.section	.text.RS_startSend,"ax",@progbits
 325               	.global	RS_startSend
 327               	RS_startSend:
 328               	.LFB6:
 162:../common/rs232_485_hw.c **** #endif
 163:../common/rs232_485_hw.c **** }
 164:../common/rs232_485_hw.c **** 
 165:../common/rs232_485_hw.c **** /*!
 166:../common/rs232_485_hw.c ****  *******************************************************************************
 167:../common/rs232_485_hw.c ****  *  Starts sending the content of the output buffer
 168:../common/rs232_485_hw.c ****  *
 169:../common/rs232_485_hw.c ****  *  \note
 170:../common/rs232_485_hw.c ****  *  - we send the first char to serial port
 171:../common/rs232_485_hw.c ****  *  - start the interrupt
 172:../common/rs232_485_hw.c ****  ******************************************************************************/
 173:../common/rs232_485_hw.c **** void RS_startSend(void)
 174:../common/rs232_485_hw.c **** {
 329               		.loc 1 174 0
 330               		.cfi_startproc
 331               	/* prologue: function */
 332               	/* frame size = 0 */
 333               	/* stack size = 0 */
 334               	.L__stack_usage = 0
 175:../common/rs232_485_hw.c **** 	cli();
 335               		.loc 1 175 0
 336               	/* #APP */
 337               	 ;  175 "../common/rs232_485_hw.c" 1
 338 0000 F894      		cli
 339               	 ;  0 "" 2
 176:../common/rs232_485_hw.c **** #if defined COM_RS485
 177:../common/rs232_485_hw.c **** 	// TODO: change rs485 to transmit
 178:../common/rs232_485_hw.c **** #error "code is not complete for rs485"
 179:../common/rs232_485_hw.c **** #endif
 180:../common/rs232_485_hw.c **** 	if ((UCSR0B & _BV(UDRIE0)) == 0)
 340               		.loc 1 180 0
 341               	/* #NOAPP */
 342 0002 8091 C100 		lds r24,193
 343 0006 85FD      		sbrc r24,5
 344 0008 00C0      		rjmp .L9
 181:../common/rs232_485_hw.c **** 	{
 182:../common/rs232_485_hw.c **** 		UCSR0B &= ~(_BV(TXCIE0));
 345               		.loc 1 182 0
 346 000a 8091 C100 		lds r24,193
 347 000e 8F7B      		andi r24,lo8(-65)
 348 0010 8093 C100 		sts 193,r24
 183:../common/rs232_485_hw.c **** 		UCSR0A |= _BV(TXC0); // clear interrupt flag
 349               		.loc 1 183 0
 350 0014 8091 C000 		lds r24,192
 351 0018 8064      		ori r24,lo8(64)
 352 001a 8093 C000 		sts 192,r24
 184:../common/rs232_485_hw.c **** 		UCSR0B |= _BV(UDRIE0) | _BV(TXEN0);
 353               		.loc 1 184 0
 354 001e 8091 C100 		lds r24,193
 355 0022 8862      		ori r24,lo8(40)
 356 0024 8093 C100 		sts 193,r24
 357               	.L9:
 185:../common/rs232_485_hw.c **** 		// UDR0 = COM_tx_char_isr(); // done in interrupt
 186:../common/rs232_485_hw.c **** 	}
 187:../common/rs232_485_hw.c **** 	sei();
 358               		.loc 1 187 0
 359               	/* #APP */
 360               	 ;  187 "../common/rs232_485_hw.c" 1
 361 0028 7894      		sei
 362               	 ;  0 "" 2
 363               	/* #NOAPP */
 364 002a 0895      		ret
 365               		.cfi_endproc
 366               	.LFE6:
 368               		.text
 369               	.Letext0:
 370               		.file 2 "q:\\winavr\\avr\\include\\stdint.h"
 371               		.file 3 "./com.h"
DEFINED SYMBOLS
                            *ABS*:00000000 rs232_485_hw.c
C:\Users\Kaworu\AppData\Local\Temp\cc14pC0l.s:2      *ABS*:0000003e __SP_H__
C:\Users\Kaworu\AppData\Local\Temp\cc14pC0l.s:3      *ABS*:0000003d __SP_L__
C:\Users\Kaworu\AppData\Local\Temp\cc14pC0l.s:4      *ABS*:0000003f __SREG__
C:\Users\Kaworu\AppData\Local\Temp\cc14pC0l.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\Kaworu\AppData\Local\Temp\cc14pC0l.s:6      *ABS*:00000001 __zero_reg__
C:\Users\Kaworu\AppData\Local\Temp\cc14pC0l.s:13     .text.__vector_13:00000000 __vector_13
C:\Users\Kaworu\AppData\Local\Temp\cc14pC0l.s:122    .text.__vector_14:00000000 __vector_14
C:\Users\Kaworu\AppData\Local\Temp\cc14pC0l.s:237    .text.__vector_15:00000000 __vector_15
C:\Users\Kaworu\AppData\Local\Temp\cc14pC0l.s:290    .text.RS_Init:00000000 RS_Init
C:\Users\Kaworu\AppData\Local\Temp\cc14pC0l.s:327    .text.RS_startSend:00000000 RS_startSend

UNDEFINED SYMBOLS
COM_rx_char_isr
COM_tx_char_isr
